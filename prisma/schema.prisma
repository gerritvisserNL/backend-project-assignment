// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "sqlite"
  url          = "file:./dev.db"
  relationMode = "foreignKeys"
}

model User {
  id              String @id @default(uuid())
  username        String @unique
  password        String
  name            String
  email           String
  phoneNumber     String
  profilePicture  String?

  // 1-on-many: One User can have many reviews and bookings
  reviews  Review[] // relation from User to Review
  bookings Booking[] // relation from User to Booking
}

model Review {
  id         String @id @default(uuid())
  userId     String
  propertyId String
  rating     Int
  comment    String

  // Relation to User
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Relation to Property
  property Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}

model Booking {
  id             String   @id @default(uuid())
  userId         String
  propertyId     String
  checkinDate    DateTime
  checkoutDate   DateTime
  numberOfGuests Int
  totalPrice     Float
  bookingStatus  String

  // Relation to User
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Relation to Property
  property Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}

model Property {
  id             String @id @default(uuid())
  hostId         String
  title          String
  description    String
  location       String
  pricePerNight  Float
  bedroomCount   Int
  bathRoomCount  Int
  maxGuestCount  Int
  rating         Int

  // One-to-many: One property can have many bookings
  bookings Booking[]

  // Many-to-many: Many properties can have many amenities (via Prisma's join table)
  amenities Amenity[] @relation("PropertyAmenity")

  // One-to-many relationship: One host can have multiple properties
  host Host @relation(fields: [hostId], references: [id], onDelete: Cascade)

  // One-to-many: One property can have many reviews
  reviews Review[]
}

model Amenity {
  id   String @id @default(uuid())
  name String

  // Many-to-many: Many amenities can have many properties (via Prisma's join table)
  properties Property[] @relation("PropertyAmenity")
}

model Host {
  id              String @id @default(uuid())
  username        String @unique
  password        String
  name            String
  email           String
  phoneNumber     String
  profilePicture  String?
  aboutMe         String

  // One-to-many: One host can have many properties for rental
  listings Property[]
}
